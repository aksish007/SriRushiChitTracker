// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String   @id @default(cuid())
  registrationId String   @unique
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  phone          String
  address        String?
  role           String   @default("USER") // Changed from UserRole enum
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Referral relationships
  referredBy   String?
  referrer     User?   @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals    User[]  @relation("UserReferrals")

  // Chit subscriptions
  subscriptions ChitSubscription[]
  
  // Payouts
  payouts       Payout[]
  
  // Audit logs
  auditLogs     AuditLog[]

  @@map("users")
}

model ChitScheme {
  id          String   @id @default(cuid())
  chitId      String   @unique
  name        String
  amount      Decimal
  duration    Int      // in months
  totalSlots  Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions ChitSubscription[]

  @@map("chit_schemes")
}

model ChitSubscription {
  id           String   @id @default(cuid())
  subscriberId String   @unique
  userId       String
  chitSchemeId String
  status       String   @default("ACTIVE") // Changed from SubscriptionStatus enum
  joinedAt     DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chitScheme ChitScheme @relation(fields: [chitSchemeId], references: [id], onDelete: Cascade)
  payouts    Payout[]

  @@map("chit_subscriptions")
}

model Payout {
  id           String   @id @default(cuid())
  userId       String
  subscriptionId String
  amount       Decimal
  month        Int
  year         Int
  status       String   @default("PENDING") // Changed from PayoutStatus enum
  paidAt       DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription ChitSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, month, year])
  @@map("payouts")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}